# coding: utf-8

"""
    MarzbanAPI

    Unified GUI Censorship Resistant Solution Powered by Xray

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conint, conlist, constr

class UserTemplateCreate(BaseModel):
    """
    UserTemplateCreate
    """
    name: Optional[StrictStr] = None
    data_limit: Optional[conint(strict=True, ge=0)] = Field(default=None, description="data_limit can be 0 or greater")
    expire_duration: Optional[conint(strict=True, ge=0)] = Field(default=None, description="expire_duration can be 0 or greater in seconds")
    username_prefix: Optional[constr(strict=True, max_length=20, min_length=1)] = None
    username_suffix: Optional[constr(strict=True, max_length=20, min_length=1)] = None
    inbounds: Optional[Dict[str, conlist(StrictStr)]] = None
    __properties = ["name", "data_limit", "expire_duration", "username_prefix", "username_suffix", "inbounds"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserTemplateCreate:
        """Create an instance of UserTemplateCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserTemplateCreate:
        """Create an instance of UserTemplateCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserTemplateCreate.parse_obj(obj)

        _obj = UserTemplateCreate.parse_obj({
            "name": obj.get("name"),
            "data_limit": obj.get("data_limit"),
            "expire_duration": obj.get("expire_duration"),
            "username_prefix": obj.get("username_prefix"),
            "username_suffix": obj.get("username_suffix"),
            "inbounds": obj.get("inbounds")
        })
        return _obj


