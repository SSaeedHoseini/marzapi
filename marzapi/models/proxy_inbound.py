# coding: utf-8

"""
    MarzbanAPI

    Unified GUI Censorship Resistant Solution Powered by Xray

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from marzapi.models.port import Port
from marzapi.models.proxy_types import ProxyTypes

class ProxyInbound(BaseModel):
    """
    ProxyInbound
    """
    tag: StrictStr = Field(...)
    protocol: ProxyTypes = Field(...)
    network: StrictStr = Field(...)
    tls: StrictStr = Field(...)
    port: Port = Field(...)
    __properties = ["tag", "protocol", "network", "tls", "port"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProxyInbound:
        """Create an instance of ProxyInbound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of port
        if self.port:
            _dict['port'] = self.port.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProxyInbound:
        """Create an instance of ProxyInbound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProxyInbound.parse_obj(obj)

        _obj = ProxyInbound.parse_obj({
            "tag": obj.get("tag"),
            "protocol": obj.get("protocol"),
            "network": obj.get("network"),
            "tls": obj.get("tls"),
            "port": Port.from_dict(obj.get("port")) if obj.get("port") is not None else None
        })
        return _obj


