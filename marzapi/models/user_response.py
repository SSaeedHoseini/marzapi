# coding: utf-8

"""
    MarzbanAPI

    Unified GUI Censorship Resistant Solution Powered by Xray

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint, conlist
from marzapi.models.admin import Admin
from marzapi.models.user_data_limit_reset_strategy import UserDataLimitResetStrategy
from marzapi.models.user_status import UserStatus

class UserResponse(BaseModel):
    """
    UserResponse
    """
    proxies: Dict[str, Any] = Field(...)
    expire: Optional[StrictInt] = None
    data_limit: Optional[conint(strict=True, ge=0)] = Field(default=None, description="data_limit can be 0 or greater")
    data_limit_reset_strategy: Optional[UserDataLimitResetStrategy] = None
    inbounds: Optional[Dict[str, conlist(StrictStr)]] = None
    note: Optional[StrictStr] = None
    sub_updated_at: Optional[datetime] = None
    sub_last_user_agent: Optional[StrictStr] = None
    online_at: Optional[datetime] = None
    on_hold_expire_duration: Optional[StrictInt] = None
    on_hold_timeout: Optional[datetime] = None
    auto_delete_in_days: Optional[StrictInt] = None
    username: StrictStr = Field(...)
    status: UserStatus = Field(...)
    used_traffic: StrictInt = Field(...)
    lifetime_used_traffic: Optional[StrictInt] = 0
    created_at: datetime = Field(...)
    links: Optional[conlist(StrictStr)] = None
    subscription_url: Optional[StrictStr] = ''
    excluded_inbounds: Optional[Dict[str, conlist(StrictStr)]] = None
    admin: Optional[Admin] = None
    __properties = ["proxies", "expire", "data_limit", "data_limit_reset_strategy", "inbounds", "note", "sub_updated_at", "sub_last_user_agent", "online_at", "on_hold_expire_duration", "on_hold_timeout", "auto_delete_in_days", "username", "status", "used_traffic", "lifetime_used_traffic", "created_at", "links", "subscription_url", "excluded_inbounds", "admin"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserResponse:
        """Create an instance of UserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of admin
        if self.admin:
            _dict['admin'] = self.admin.to_dict()
        # set to None if expire (nullable) is None
        # and __fields_set__ contains the field
        if self.expire is None and "expire" in self.__fields_set__:
            _dict['expire'] = None

        # set to None if note (nullable) is None
        # and __fields_set__ contains the field
        if self.note is None and "note" in self.__fields_set__:
            _dict['note'] = None

        # set to None if sub_updated_at (nullable) is None
        # and __fields_set__ contains the field
        if self.sub_updated_at is None and "sub_updated_at" in self.__fields_set__:
            _dict['sub_updated_at'] = None

        # set to None if sub_last_user_agent (nullable) is None
        # and __fields_set__ contains the field
        if self.sub_last_user_agent is None and "sub_last_user_agent" in self.__fields_set__:
            _dict['sub_last_user_agent'] = None

        # set to None if online_at (nullable) is None
        # and __fields_set__ contains the field
        if self.online_at is None and "online_at" in self.__fields_set__:
            _dict['online_at'] = None

        # set to None if on_hold_expire_duration (nullable) is None
        # and __fields_set__ contains the field
        if self.on_hold_expire_duration is None and "on_hold_expire_duration" in self.__fields_set__:
            _dict['on_hold_expire_duration'] = None

        # set to None if on_hold_timeout (nullable) is None
        # and __fields_set__ contains the field
        if self.on_hold_timeout is None and "on_hold_timeout" in self.__fields_set__:
            _dict['on_hold_timeout'] = None

        # set to None if auto_delete_in_days (nullable) is None
        # and __fields_set__ contains the field
        if self.auto_delete_in_days is None and "auto_delete_in_days" in self.__fields_set__:
            _dict['auto_delete_in_days'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserResponse:
        """Create an instance of UserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserResponse.parse_obj(obj)

        _obj = UserResponse.parse_obj({
            "proxies": obj.get("proxies"),
            "expire": obj.get("expire"),
            "data_limit": obj.get("data_limit"),
            "data_limit_reset_strategy": obj.get("data_limit_reset_strategy"),
            "inbounds": obj.get("inbounds"),
            "note": obj.get("note"),
            "sub_updated_at": obj.get("sub_updated_at"),
            "sub_last_user_agent": obj.get("sub_last_user_agent"),
            "online_at": obj.get("online_at"),
            "on_hold_expire_duration": obj.get("on_hold_expire_duration"),
            "on_hold_timeout": obj.get("on_hold_timeout"),
            "auto_delete_in_days": obj.get("auto_delete_in_days"),
            "username": obj.get("username"),
            "status": obj.get("status"),
            "used_traffic": obj.get("used_traffic"),
            "lifetime_used_traffic": obj.get("lifetime_used_traffic") if obj.get("lifetime_used_traffic") is not None else 0,
            "created_at": obj.get("created_at"),
            "links": obj.get("links"),
            "subscription_url": obj.get("subscription_url") if obj.get("subscription_url") is not None else '',
            "excluded_inbounds": obj.get("excluded_inbounds"),
            "admin": Admin.from_dict(obj.get("admin")) if obj.get("admin") is not None else None
        })
        return _obj


